library(dplyr)
# summarise the counts of properties of the grid cells
int.res_sf %>% st_drop_geometry() %>%
group_by(ID) %>%
summarise(count = sum(props)) -> props
# link to the grid data
sq_grid %>% left_join(props) -> sq_grid
# link to the grid data
sq_grid %>% left_join(props) -> sq_grid
tm_shape(sq_grid) +
tm_polygons("count", palette = "Greens",
style = "kmeans", title = "Properties for sale") +
tm_layout(frame = F, legend.position = c(1,0.5))
tm_shape(props2) +
tm_polygons("prop.count", palette = "Greens",
style = "kmeans", title = "No. of Properties for sale") +
tm_layout(frame = F, legend.position = c(1,0.5))
# link to the grid data
sq_grid %>% left_join(props) -> sq_grid
tm_shape(sq_grid) +
tm_polygons("count", palette = "Greens",
style = "kmeans", title = "Properties for sale") +
tm_layout(frame = F, legend.position = c(1,0.5))
props2 = st_interpolate_aw(oa[, "prop.count"], sq_grid, extensive = T)
tm_shape(props2) +
tm_polygons("prop.count", palette = "Greens",
style = "kmeans", title = "No. of Properties for sale") +
tm_layout(frame = F, legend.position = c(1,0.5))
gc()
# load the packages
library(sf)
library(Rcpp)
remove.packages("Rcpp")
install.packages("Rcpp")
library(sf)
library(sp)
library(tmap)
library(igraph)
library(sfnetworks)
library(dplyr)
library(tidygraph)
library(here)
library(magrittr)
library(osmdata)
library(dodgr)
library(expss)
# Define our bbox coordinates, here our coordinates relate to Portsmouth
p_bbox <- c(-1.113197, 50.775781, -1.026508, 50.859941)
net <- dodgr_streetnet(p_bbox, quiet = F)
# Create network graph using are edge data, with the foot weighting profile
bb <- osmdata::getbb ("Auckland, NZ")
npts <- 1000
xy <- apply (bb, 1, function (i) min (i) + runif (npts) * diff (i))
bb; head (xy)
net <- dodgr_streetnet (bb)
rlang::last_error()
rlang::last_trace()
head(sa1,1)
# load packages
library(dplyr)
library(ggplot2)
library(fmsb)
library(stargazer)
library(xtable)
library(xtable)
#### LOAD DATA ####
# read data
df <- read.csv("surveydata/surveydata.csv") |>
filter(homedistance %in% c("0-1 km", "1-2 km", "2-3 km")) |>
mutate(workremotely = as.numeric(workremotely)) |>
mutate(timeToWork = as.numeric(timeToWork)) |>
mutate(timeToSchool = as.numeric(timeToSchool)) |>
mutate(timeToShops = as.numeric(timeToShops)) |>
mutate(timeToCafe = as.numeric(timeToCafe)) |>
mutate(timeToEntert = as.numeric(timeToEntert)) |>
mutate(timeToSport = as.numeric(timeToSport)) |>
mutate(timeToGreen = as.numeric(timeToGreen)) |>
mutate(timeToHealth = as.numeric(timeToHealth)) |>
mutate(foodShoppingLocally = as.numeric(foodShoppingLocally)) |>
mutate(nonFoodShopLocally = as.numeric(nonFoodShopLocally)) |>
mutate(cafesLocally = as.numeric(cafesLocally)) |>
mutate(easyServicesLocally = as.numeric(easyServicesLocally)) |>
mutate(childrenFacilitiesLocally = as.numeric(childrenFacilitiesLocally)) |>
mutate(sportLocally = as.numeric(sportLocally)) |>
mutate(attractiveStreets = as.numeric(attractiveStreets)) |>
mutate(natureAccesible = as.numeric(natureAccesible)) |>
mutate(easySafeWalkCycle = as.numeric(easySafeWalkCycle)) |>
mutate(leaveNoCar = as.numeric(leaveNoCar)) |>
mutate(affordabilityPT = as.numeric(affordabilityPT)) |>
mutate(affordabilityHousing = as.numeric(affordabilityHousing)) |>
mutate(localEmployment = as.numeric(localEmployment)) |>
mutate(meetDailyNeeds = as.numeric(meetDailyNeeds)) |>
mutate(senseOfCommunity = as.numeric(senseOfCommunity)) |>
mutate(sayDecisions = as.numeric(sayDecisions)) |>
mutate(howOftenOutsideLocal = as.numeric(howOftenOutsideLocal))
library(readr)
install.packages("rgdal")
install.packages("readr")
install.packages("readr")
install.packages("rgdal")
df <- read.csv("gender_ineq.csv")
View(df)
df$gender_inequality <- as.numeric(df$gender_inequality)
df <- read.csv("gender_ineq.csv") # index data
sdf <- st_read("World_Countries_Generalized.geojson") # and spatial data
library(sf)
library(tmap) #we'll need that to make a map to check what we've done
setwd("~/Desktop/jan nie bałagani/all things uni/GIS/wk4")
df <- read.csv("gender_ineq.csv") # index data
sdf <- st_read("World_Countries_Generalized.geojson") # and spatial data
df$gender_inequality <- as.numeric(df$gender_inequality)
View(sdf)
result <- left_join(sdf, df, by = c("COUNRY" = "country"))
library(dplyr) # we'll need that to join
library(sf) # we'll need that to deal with spatial data
library(tmap) # we'll need that to make a map to check that what we did looks correct
library(dplyr) # we'll need that to join
library(sf) # we'll need that to deal with spatial data
library(tmap) # we'll need that to make a map to check that what we did looks correct
Now, let's load some data!
```{r}
df <- read.csv("gender_ineq.csv") # index data
sdf <- st_read("World_Countries_Generalized.geojson") # and spatial data
### Let's try to join the two datasets by matching the 'country' columns.
```{r}
result <- left_join(sdf, df, by = c("COUNRY" = "country"))
library(dplyr) # we'll need that to join
library(sf) # we'll need that to deal with spatial data
library(tmap) # we'll need that to make a map to check that what we did looks correct
df <- read.csv("gender_ineq.csv") # index data
sdf <- st_read("World_Countries_Generalized.geojson") # and spatial data
df$gender_inequality <- as.numeric(df$gender_inequality)
result <- left_join(sdf, df, by = c("COUNRY" = "country"))
View(sdf)
result <- left_join(sdf, df, by = c("COUNRY" = "country"))
result <- left_join(sdf, df, by = c("COUNTRY" = "country"))
# and display the results
head(result)
tm_fill("gender_inequality", palette = "Blues")
library(tmap) # we'll need that to make a map to check that what we did looks correct
tm_shape(result) +
tm_borders(lwd = 0.5)
tm_shape(result) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
countries_not_in_spatial_data <- df %>%
anti_join(sdf, by = c("country" = "COUNRY"))
countries_not_in_spatial_data <- df %>%
anti_join(sdf, by = c("country" = "COUNTRY"))
# Filter for rows where the index column is numeric (not NA)
countries_with_numeric_index <- countries_not_in_spatial_data %>%
filter(!is.na(index_column_name))  # Replace index_column_name with the actual column name
# View the resulting data frame
view(countries_with_numeric_index)
library(dplyr) # we'll need that to join
# View the resulting data frame
view(countries_with_numeric_index)
i
# Filter for rows where the index column is numeric (not NA)
countries_with_numeric_index <- countries_not_in_spatial_data %>%
filter(!is.na(index_column_name))  # Replace index_column_name with the actual column name
View(countries_not_in_spatial_data)
not_matched
not_matched <- df %>%
anti_join(sdf, by = c("country" = "COUNTRY"))
not_matched
not_matched <- df %>%
anti_join(sdf, by = c("country" = "COUNTRY")) |>
filter(!is.na(gender_inequality))
not_matched
iso_mapping <- data.frame(
country = c("Korea (Republic of)", "Czechia", "Türkiye", "Iran (Islamic Republic of)", "Moldova (Republic of)","Viet Nam", "Bolivia (Plurinational State of)", "Venezuela (Bolivarian Republic of)","Lao People's Democratic Republic", "Eswatini (Kingdom of)", "Syrian Arab Republic","Tanzania (United Republic of)", "Congo (Democratic Republic of the)"),
iso_code = c("KR", "CZ", "TR", "IR", "MD", "VN", "BO", "VE", "LA", "SZ", "SY", "TZ", "CD")
)
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country")
# View the resulting data frame
view(df_with_iso)
# View the resulting data frame
df_with_iso
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter(iso_code != NA)
# View the resulting data frame
df_with_iso
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter(iso_code == NA)
# View the resulting data frame
df_with_iso
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter('iso_code' != NA)
# View the resulting data frame
df_with_iso
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter('iso_code' != NA)
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter(!is.na(iso_code))
# View the resulting data frame
df_with_iso
result <- left_join(sdf, df_with_iso, by = c("ISO" = "iso_code"))
# and display the results
head(result)
tm_shape(result) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
tm_shape(result) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
# and display the results
head(missing)
missing <- left_join(sdf, df_with_iso, by = c("ISO" = "iso_code"))
# and display the results
head(missing)
library(dplyr) # we'll need that to join
library(sf) # we'll need that to deal with spatial data
library(tmap) # we'll need that to make a map to check that what we did looks correct
df <- read.csv("gender_ineq.csv") # index data
sdf <- st_read("World_Countries_Generalized.geojson") # and spatial data
df$gender_inequality <- as.numeric(df$gender_inequality)
result <- left_join(sdf, df, by = c("COUNTRY" = "country"))
# and display the results
head(result)
tm_shape(result) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
not_matched <- df %>%
anti_join(sdf, by = c("country" = "COUNTRY")) |> # what countries didn't match correctly?
filter(!is.na(gender_inequality)) # and for which do we have the data?
not_matched # show the result
iso_mapping <- data.frame(
country = c("Korea (Republic of)", "Czechia", "Türkiye", "Iran (Islamic Republic of)", "Moldova (Republic of)","Viet Nam", "Bolivia (Plurinational State of)", "Venezuela (Bolivarian Republic of)","Lao People's Democratic Republic", "Eswatini (Kingdom of)", "Syrian Arab Republic","Tanzania (United Republic of)", "Congo (Democratic Republic of the)"),
iso_code = c("KR", "CZ", "TR", "IR", "MD", "VN", "BO", "VE", "LA", "SZ", "SY", "TZ", "CD")
)
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter(!is.na(iso_code))
# View the resulting data frame
df_with_iso
missing <- left_join(sdf, df_with_iso, by = c("ISO" = "iso_code"))
# and display the results
head(missing)
tm_shape(result) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
tm_shape(missing) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
combined_data <- rbind(result, missing)
library(dplyr) # we'll need that to join
library(sf) # we'll need that to deal with spatial data
library(tmap) # we'll need that to make a map to check that what we did looks correct
df <- read.csv("gender_ineq.csv") # index data
sdf <- st_read("World_Countries_Generalized.geojson") # and spatial data
df$gender_inequality <- as.numeric(df$gender_inequality)
result <- left_join(sdf, df, by = c("COUNTRY" = "country"))
# and display the results
head(result)
tm_shape(result) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
not_matched <- df %>%
anti_join(sdf, by = c("country" = "COUNTRY")) |> # what countries didn't match correctly?
filter(!is.na(gender_inequality)) # and for which do we have the data?
not_matched # show the result
iso_mapping <- data.frame(
country = c("Korea (Republic of)", "Czechia", "Türkiye", "Iran (Islamic Republic of)", "Moldova (Republic of)","Viet Nam", "Bolivia (Plurinational State of)", "Venezuela (Bolivarian Republic of)","Lao People's Democratic Republic", "Eswatini (Kingdom of)", "Syrian Arab Republic","Tanzania (United Republic of)", "Congo (Democratic Republic of the)"),
iso_code = c("KR", "CZ", "TR", "IR", "MD", "VN", "BO", "VE", "LA", "SZ", "SY", "TZ", "CD")
)
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter(!is.na(iso_code))
# View the resulting data frame
df_with_iso
missing <- left_join(sdf, df_with_iso, by = c("ISO" = "iso_code"))
# and display the results
head(missing)
tm_shape(missing) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
head(result)
head(missing)
combined_data <- rbind(result, missing)
sdf
missing
library(dplyr) # we'll need that to join
library(sf) # we'll need that to deal with spatial data
library(tmap) # we'll need that to make a map to check that what we did looks correct
df <- read.csv("gender_ineq.csv") # index data
sdf <- st_read("World_Countries_Generalized.geojson") # and spatial data
df$gender_inequality <- as.numeric(df$gender_inequality)
result <- left_join(sdf, df, by = c("COUNTRY" = "country"))
# and display the results
head(result)
tm_shape(result) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
not_matched <- df %>%
anti_join(sdf, by = c("country" = "COUNTRY")) |> # what countries didn't match correctly?
filter(!is.na(gender_inequality)) # and for which do we have the data?
not_matched # show the result
iso_mapping <- data.frame(
country = c("Korea (Republic of)", "Czechia", "Türkiye", "Iran (Islamic Republic of)", "Moldova (Republic of)","Viet Nam", "Bolivia (Plurinational State of)", "Venezuela (Bolivarian Republic of)","Lao People's Democratic Republic", "Eswatini (Kingdom of)", "Syrian Arab Republic","Tanzania (United Republic of)", "Congo (Democratic Republic of the)"),
iso_code = c("KR", "CZ", "TR", "IR", "MD", "VN", "BO", "VE", "LA", "SZ", "SY", "TZ", "CD")
)
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter(!is.na(iso_code))
# View the resulting data frame
df_with_iso
library(dplyr) # we'll need that to join
library(sf) # we'll need that to deal with spatial data
library(tmap) # we'll need that to make a map to check that what we did looks correct
df <- read.csv("gender_ineq.csv") # index data
sdf <- st_read("World_Countries_Generalized.geojson") # and spatial data
df$gender_inequality <- as.numeric(df$gender_inequality)
result <- left_join(sdf, df, by = c("COUNTRY" = "country"))
# and display the results
head(result)
tm_shape(result) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
not_matched <- df %>%
anti_join(sdf, by = c("country" = "COUNTRY")) |> # what countries didn't match correctly?
filter(!is.na(gender_inequality)) # and for which do we have the data?
not_matched # show the result
iso_mapping <- data.frame(
country = c("Korea (Republic of)", "Czechia", "Türkiye", "Iran (Islamic Republic of)", "Moldova (Republic of)","Viet Nam", "Bolivia (Plurinational State of)", "Venezuela (Bolivarian Republic of)","Lao People's Democratic Republic", "Eswatini (Kingdom of)", "Syrian Arab Republic","Tanzania (United Republic of)", "Congo (Democratic Republic of the)"),
iso_code = c("KR", "CZ", "TR", "IR", "MD", "VN", "BO", "VE", "LA", "SZ", "SY", "TZ", "CD")
)
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter(!is.na(iso_code))
# View the resulting data frame
df_with_iso
missing <- left_join(sdf, df_with_iso, by = c("ISO" = "iso_code"))
# and display the results
head(missing)
tm_shape(missing) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
combined_data <- left_join(result, missing)
all <- left_join(result, df_with_iso, by = c("ISO" = "iso_code"))
# and display the results
head(missing)
library(dplyr) # we'll need that to join
library(sf) # we'll need that to deal with spatial data
library(tmap) # we'll need that to make a map to check that what we did looks correct
df <- read.csv("gender_ineq.csv") # index data
sdf <- st_read("World_Countries_Generalized.geojson") # and spatial data
df$gender_inequality <- as.numeric(df$gender_inequality)
result <- left_join(sdf, df, by = c("COUNTRY" = "country"))
# and display the results
head(result)
tm_shape(result) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
not_matched <- df %>%
anti_join(sdf, by = c("country" = "COUNTRY")) |> # what countries didn't match correctly?
filter(!is.na(gender_inequality)) # and for which do we have the data?
not_matched # show the result
iso_mapping <- data.frame(
country = c("Korea (Republic of)", "Czechia", "Türkiye", "Iran (Islamic Republic of)", "Moldova (Republic of)","Viet Nam", "Bolivia (Plurinational State of)", "Venezuela (Bolivarian Republic of)","Lao People's Democratic Republic", "Eswatini (Kingdom of)", "Syrian Arab Republic","Tanzania (United Republic of)", "Congo (Democratic Republic of the)"),
iso_code = c("KR", "CZ", "TR", "IR", "MD", "VN", "BO", "VE", "LA", "SZ", "SY", "TZ", "CD")
)
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter(!is.na(iso_code))
# View the resulting data frame
df_with_iso
all <- left_join(result, df_with_iso, by = c("ISO" = "iso_code"))
# and display the results
head(all)
tm_shape(all) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
all <- left_join(result, df_with_iso, by = c("ISO" = "iso_code"))
# and display the results
summary(all)
df['gender_inequality'] = df['gender_inequality.x'].fillna(df['gender_inequality.y']).fillna(df['gender_inequality.x'])
df['gender_inequality'] = df['gender_inequality.x'].fillna(df['gender_inequality.y']).fillna(df['gender_inequality.x'])
all <- left_join(result, df_with_iso, by = c("ISO" = "iso_code"))
all['gender_inequality'] = all['gender_inequality.x'].fillna(all['gender_inequality.y']).fillna(all['gender_inequality.x'])
all <- left_join(result, df_with_iso, by = c("ISO" = "iso_code"))
all$gender_inequality <- ifelse(is.na(all$gender_inequality.x), all$gender_inequality.y, all$gender_inequality.x)
# and display the results
summary(all)
tm_shape(all) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
st_write(all, "gender_index_world.gpkg")
library(dplyr) # we'll need that to join
library(sf) # we'll need that to deal with spatial data
library(tmap) # we'll need that to make a map to check that what we did looks correct
df <- read.csv("gender_ineq.csv") # index data
sdf <- st_read("World_Countries_Generalized.geojson") # and spatial data
df$gender_inequality <- as.numeric(df$gender_inequality)
result <- left_join(sdf, df, by = c("COUNTRY" = "country"))
# and display the results
head(result)
tm_shape(result) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
not_matched <- df %>%
anti_join(sdf, by = c("country" = "COUNTRY")) |> # what countries didn't match correctly?
filter(!is.na(gender_inequality)) # and for which do we have the data?
not_matched # show the result
iso_mapping <- data.frame(
country = c("Korea (Republic of)", "Czechia", "Türkiye", "Iran (Islamic Republic of)", "Moldova (Republic of)","Viet Nam", "Bolivia (Plurinational State of)", "Venezuela (Bolivarian Republic of)","Lao People's Democratic Republic", "Eswatini (Kingdom of)", "Syrian Arab Republic","Tanzania (United Republic of)", "Congo (Democratic Republic of the)"),
iso_code = c("KR", "CZ", "TR", "IR", "MD", "VN", "BO", "VE", "LA", "SZ", "SY", "TZ", "CD")
)
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter(!is.na(iso_code))
# View the resulting data frame
df_with_iso
all <- left_join(result, df_with_iso, by = c("ISO" = "iso_code"))
all$gender_inequality <- ifelse(is.na(all$gender_inequality.x), all$gender_inequality.y, all$gender_inequality.x)
all <- subset(all, select = -c(gender_inequality.x, gender_inequality.y))
# and display the results
summary(all)
tm_shape(all) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
st_write(all, "gender_index_world.gpkg")
st_write(all, "gender_index_world.gpkg")
st_write(all, "gender_index_world.gpkg")
setwd("~/Desktop/jan nie bałagani/all things uni/GIS/wk4")
st_write(all, "gender_index_world.gpkg")
library(dplyr) # we'll need that to join
library(sf) # we'll need that to deal with spatial data
library(tmap) # we'll need that to make a map to check that what we did looks correct
df <- read.csv("gender_ineq.csv") # index data
sdf <- st_read("World_Countries_Generalized.geojson") # and spatial data
df$gender_inequality <- as.numeric(df$gender_inequality)
result <- left_join(sdf, df, by = c("COUNTRY" = "country"))
# and display the results
head(result)
tm_shape(result) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
not_matched <- df %>%
anti_join(sdf, by = c("country" = "COUNTRY")) |> # what countries didn't match correctly?
filter(!is.na(gender_inequality)) # and for which do we have the data?
not_matched # show the result
iso_mapping <- data.frame(
country = c("Korea (Republic of)", "Czechia", "Türkiye", "Iran (Islamic Republic of)", "Moldova (Republic of)","Viet Nam", "Bolivia (Plurinational State of)", "Venezuela (Bolivarian Republic of)","Lao People's Democratic Republic", "Eswatini (Kingdom of)", "Syrian Arab Republic","Tanzania (United Republic of)", "Congo (Democratic Republic of the)"),
iso_code = c("KR", "CZ", "TR", "IR", "MD", "VN", "BO", "VE", "LA", "SZ", "SY", "TZ", "CD")
)
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter(!is.na(iso_code))
# View the resulting data frame
df_with_iso
all <- left_join(result, df_with_iso, by = c("ISO" = "iso_code"))
all$gender_inequality <- ifelse(is.na(all$gender_inequality.x), all$gender_inequality.y, all$gender_inequality.x)
all <- subset(all, select = -c(gender_inequality.x, gender_inequality.y, country))
# and display the results
summary(all)
tm_shape(all) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
st_write(all, "gender_index_world.gpkg")
library(dplyr) # we'll need that to join
library(sf) # we'll need that to deal with spatial data
library(tmap) # we'll need that to make a map to check that what we did looks correct
df <- read.csv("gender_ineq.csv") # index data
sdf <- st_read("World_Countries_Generalized.geojson") # and spatial data
df$gender_inequality <- as.numeric(df$gender_inequality)
result <- left_join(sdf, df, by = c("COUNTRY" = "country"))
# and display the results
head(result)
tm_shape(result) +
tm_borders(lwd = 0.5) +
tm_fill("gender_inequality", palette = "Blues")
not_matched <- df %>%
anti_join(sdf, by = c("country" = "COUNTRY")) |> # what countries didn't match correctly?
filter(!is.na(gender_inequality)) # and for which do we have the data?
not_matched # show the result
iso_mapping <- data.frame(
country = c("Korea (Republic of)", "Czechia", "Türkiye", "Iran (Islamic Republic of)", "Moldova (Republic of)","Viet Nam", "Bolivia (Plurinational State of)", "Venezuela (Bolivarian Republic of)","Lao People's Democratic Republic", "Eswatini (Kingdom of)", "Syrian Arab Republic","Tanzania (United Republic of)", "Congo (Democratic Republic of the)"),
iso_code = c("KR", "CZ", "TR", "IR", "MD", "VN", "BO", "VE", "LA", "SZ", "SY", "TZ", "CD")
)
# Left join the df data frame with the iso_mapping data frame on the "country" column
df_with_iso <- df %>%
left_join(iso_mapping, by = "country") |>
filter(!is.na(iso_code))
# View the resulting data frame
df_with_iso
# View the resulting data frame
df_with_iso
result <- left_join(sdf, df, by = c("COUNTRY" = "country"))
install.packages("usethis")
edit_git_config()
usethis::edit_git_config()
usethis::edit_git_config()
